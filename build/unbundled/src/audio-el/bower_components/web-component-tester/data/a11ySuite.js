!function(e,t,n){Object.keys(e.interfaces).forEach(function(t){var a=e.interfaces[t];e.interfaces[t]=function(t){a.apply(this,arguments);var i=e.Suite,r=e.Test;t.on("pre-require",function(e,a,s){var o=new n.AuditConfiguration;o.scope=document.body,o.showUnsupportedRulesWarning=!1;var u=n.AuditRules.getRules().filter(function(e){return!e.requiresConsoleAPI});e.a11ySuite=function(e){var s=document.getElementById(e);if(s){var c=i.create(t,"A11y Audit - Fixture: "+e);return c.eachTest=function(){s.create();var e=n.Audit.run(o);e.forEach(function(e,t){if("NA"!==e.result){var i=u[t].heading,s="FAIL"===e.result?n.Audit.accessibilityErrorMessage(e):null,o=new r(i,function(){if(s)throw new Error(s)});o.file=a,c.addTest(o)}}),s.restore(),t.eachTest.apply(c,arguments),this.eachTest=t.eachTest},c}}})}}),t.use(function(e,t){var a=e.Assertion;e.assert.a11yLabel=function(e,t,n){new a(e).to.have.a11yLabel(t,n)},a.addMethod("a11yLabel",function(e,i){i&&t.flag(this,"message",i);var r=this._obj;new a(r).to.be.instanceOf(Node);var s=n.properties.findTextAlternatives(r,{});this.assert(s===e,"expected #{this} to have text alternative #{exp} but got #{act}","expected #{this} to not have text alternative #{act}",e,s,!0)})})}(window.Mocha,window.chai,window.axs);